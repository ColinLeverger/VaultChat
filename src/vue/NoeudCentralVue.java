/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JList;

import controle.NoeudCentralBackend;
import modele.AnnuaireNoeudCentral;
import modele.NoeudCentral;
import modele.NoeudCentralException;

/**
 *
 * @author Gwenole Lecorve
 * @author David Guennec
 */
public class NoeudCentralVue extends javax.swing.JFrame implements Observer
{

	/**
	 *
	 */
	private static final long serialVersionUID = -3258611110624641815L;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel destinataireLabel;

	private javax.swing.JList destinataireList;

	private javax.swing.JScrollPane destinataireScrollPane;
	private javax.swing.JLabel emetteurLabel;
	private javax.swing.JList emetteurList;
	private javax.swing.JScrollPane emetteurScrollPane;
	private javax.swing.JPanel transmissionPanel;

	// End of variables declaration//GEN-END:variables
	/**
	 * Creates new form NoeudCentralVue
	 *
	 * @param noeudCentralBackend
	 */
	public NoeudCentralVue(final NoeudCentralBackend noeudCentralBackend)
	{
		initComponents();
		noeudCentralBackend.getNoeudCentral().addObserver(this);
		noeudCentralBackend.getAnnuaire().addObserver(this);
		setVisible(true);
	}

	/**
	 * Affiche une bo�te de dialogue correspondant � une erreur
	 *
	 * @param titre
	 *            Titre de la bo�te de dialogue
	 * @param contenu
	 *            D�tail du message d'erreur
	 */
	public void afficherErreur(final String titre, final String contenu)
	{
		new ErrorDialog(this, titre, contenu);
	}

	protected void afficherTransmission(final boolean transmissionEnCours)
	{
		this.transmissionPanel.setBackground(transmissionEnCours ? Color.red : null);
	}

	protected void ajusterListe(final JList liste, final List<String> list)
	{
		// int selectionNouvelIndex;
		SortedListModel listModel = (SortedListModel) liste.getModel();
		Iterator<String> itr = list.iterator();
		String element = null;

		try {
			int[] selectedIndices = new int[list.size()];
			int i = 0;

			while ( itr.hasNext() ) {
				element = itr.next();
				selectedIndices[i] = listModel.getElementIndex(element);
				i++;
				// selectionNouvelIndex = listModel.getElementIndex(element);
				// liste.setSelectedIndex(selectionNouvelIndex);
			}

			liste.setSelectedIndices(selectedIndices);

		} catch ( Exception ex ) {
			ex.printStackTrace();
			if ( listModel.getSize() == 0 ) {
				/*
				 * Une exception se situe ici car il n'y a pas de message de
				 * deconnection, les listes d'abris ne sont pas mise à jour.
				 * Nous avons masqué l'affichage de l'erreur. Pour régler ce
				 * problèmme il faudrait faire marcher le mécanisme de priorité
				 * sur les messages (connection et deconnection plus prioritaire
				 * que l'envoie d'un signalement de danger)
				 */
				//afficherErreur("Erreur lors de la mise a jour d'une liste", "L'URL \"" + element + "\" n'est pas presente dans la liste.");
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		this.emetteurScrollPane = new javax.swing.JScrollPane();
		this.emetteurList = new javax.swing.JList();
		this.destinataireScrollPane = new javax.swing.JScrollPane();
		this.destinataireList = new javax.swing.JList();
		this.transmissionPanel = new javax.swing.JPanel();
		this.emetteurLabel = new javax.swing.JLabel();
		this.destinataireLabel = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("NoeudCentral");

		this.emetteurList.setModel(new SortedListModel());
		this.emetteurScrollPane.setViewportView(this.emetteurList);

		this.destinataireList.setModel(new SortedListModel());
		this.destinataireScrollPane.setViewportView(this.destinataireList);

		javax.swing.GroupLayout transmissionPanelLayout = new javax.swing.GroupLayout(this.transmissionPanel);
		this.transmissionPanel.setLayout(transmissionPanelLayout);
		transmissionPanelLayout.setHorizontalGroup(transmissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 142, Short.MAX_VALUE));
		transmissionPanelLayout.setVerticalGroup(transmissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 10, Short.MAX_VALUE));

		this.emetteurLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		this.emetteurLabel.setText("Emetteur");

		this.destinataireLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		this.destinataireLabel.setText("Destinataire");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		        .addGroup(layout.createSequentialGroup()
		                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                        .addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.emetteurScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
		                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.destinataireScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
		                                .addGap(0, 0, Short.MAX_VALUE))
		        .addGroup(layout.createSequentialGroup().addGap(88, 88, 88).addComponent(this.emetteurLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(23, 23, 23)
		                .addComponent(this.transmissionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		                .addComponent(this.destinataireLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(69, 69, 69))).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap(13, Short.MAX_VALUE)
		        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
		                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(this.emetteurLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		                                .addComponent(this.destinataireLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
		                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
		                        layout.createSequentialGroup().addComponent(this.transmissionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(7, 7, 7)))
		        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(this.emetteurScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
		                .addComponent(this.destinataireScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
		        .addGap(14, 14, 14)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	protected void remplirListe(final JList liste, final AnnuaireNoeudCentral annuaire)
	{
		String selection = (String) liste.getSelectedValue();
		liste.removeAll();
		SortedListModel listModel = (SortedListModel) liste.getModel();
		listModel.clear();
		for ( String url : annuaire.getAbrisDistants().keySet() ) {
			listModel.add(url);
		}
		liste.setModel(listModel);

		int selectionNouvelIndex;
		try {
			selectionNouvelIndex = listModel.getElementIndex(selection);
			liste.setSelectedIndex(selectionNouvelIndex);
		} catch ( Exception ex ) {
			if ( selection == null && listModel.getSize() > 0 ) {
				liste.setSelectedIndex(0);
			}
		}
	}

	@Override
	public void update(final Observable o, final Object arg)
	{
		if ( o instanceof NoeudCentral ) {
			try {
				ArrayList<String> emetteurUrl = new ArrayList<String>();
				emetteurUrl.add(((NoeudCentral) o).getDepuisUrl());
				ajusterListe(this.emetteurList, emetteurUrl);
				ajusterListe(this.destinataireList, ((NoeudCentral) o).getVersUrl());
				afficherTransmission(((NoeudCentral) o).tranmissionEnCours());
			} catch ( NoeudCentralException ex ) {
				afficherErreur("Erreur lors de la mise a jour d'une liste", ex.getMessage());
			}
		} else if ( o instanceof AnnuaireNoeudCentral ) {
			remplirListe(this.emetteurList, (AnnuaireNoeudCentral) o);
			remplirListe(this.destinataireList, (AnnuaireNoeudCentral) o);
		}
	}
}
